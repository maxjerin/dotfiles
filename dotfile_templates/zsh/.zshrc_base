export PATH=$(brew --prefix)/bin:$PATH
export PATH=$(brew --prefix)/sbin:$PATH


# If you come from bash you might have to change your $PATH.

# Path to your oh-my-zsh installation.
# export ZSH="~/maxjerin/.oh-my-zsh"


# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# History file settings
export HISTSIZE=10000000
export SAVEHIST="$HISTSIZE"
export HISTFILE=~/.zsh_history
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt SHARE_HISTORY             # Share history between all sessions.

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# plugins=(git zsh-autosuggestions zsh-syntax-highlighting zsh-abbr)
# plugins=(git zsh-completions)

# source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# NVM config
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm


# For compilers to find zlib you may need to set:
# export LDFLAGS="${LDFLAGS} -L/usr/local/opt/zlib/lib"
# export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/zlib/include"

# For pkg-config to find zlib you may need to set:
# export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/zlib/lib/pkgconfig"

# export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl/lib/


source "$(brew --prefix)/share/zsh-abbr/zsh-abbr.zsh"
source "$(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
source "$(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
# source "$(brew --prefix)/etc/profile.d/z.sh"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
FPATH="$(brew --prefix)/share/zsh-completions:$FPATH"
autoload -Uz compinit
for dump in ~/.zcompdump(N.mh+24); do
  compinit
done
compinit -C
zstyle ':completion:*' menu select

# export PATH="$HOME/.jenv/bin:$PATH"
# eval "$(jenv init -)"

# Bazel
# export PATH=${HOME}/bin:$PATH
# source ${HOME}/.bazel/bin/bazel-complete.bash

# K9S
export K9S_CONFIG_DIR=~/.config/k9s


# WORK ZSHRC
if test -f ~/.zshrc_company; then
  source ~/.zshrc_company
fi

# Load abbreviations
abbr load

######### Theme ############

if type brew &>/dev/null; then
  # SPACESHIP_PROMPT_ADD_NEWLINE=true
  # SPACESHIP_PROMPT_SEPARATE_LINE=false
  # source $(brew --prefix)/share/zsh/site-functions/prompt_spaceship_setup

  # TODO: Try this
  # https://github.com/pbar1/dotfiles/blob/master/.config/starship.toml
  eval "$(starship init zsh)"
  export STARSHIP_CONFIG=~/.config/starship.toml
fi

# Powerline Go Setup
: '
if [[ $(uname -s) == 'Darwin' ]]; then
  export PATH=$PATH:$(brew --prefix)/bin
  POWERLINE_GO=$(brew --prefix)/bin/powerline-go

  function powerline_precmd() {
    PS1="$($POWERLINE_GO -error $? -jobs ${${(%):%j}:-0})"

    # Uncomment the following line to automatically clear errors after showing
    # them once. This not only clears the error for powerline-go, but also for
    # everything else you run in that shell. Don't enable this if you're not
    # sure this is what you want.

    #set "?"
  }

  function install_powerline_precmd() {
    for s in "${precmd_functions[@]}"; do
      if [ "$s" = "powerline_precmd" ]; then
        return
      fi
    done
    precmd_functions+=(powerline_precmd)
  }

  if [ "$TERM" != "linux" ] && [ -f "$POWERLINE_GO" ]; then
    install_powerline_precmd
  fi

  # Newline after terminal
  prompt_end() {
   if [[ -n $CURRENT_BG ]]; then
       print -n "%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
   else
       print -n "%{%k%}"
   fi

   print -n "%{%f%}"
   CURRENT_BG=''

   # Adds the new line and ➜ as the start character.
   printf "\n ➜";
  }
fi
: '


######### Theme ############

# Disable Homebrew autoupdates
export HOMEBREW_NO_AUTO_UPDATE=1

# Remove all duplicates from $PATH
typeset -U PATH
